name: ci-backend

on:
  push:
    # b/users/crud
    # b/assets/crud
    branches: ["main", "dev", "b/**"]

jobs:
  get_file_changes:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: 
        os: [ubuntu-latest]
    
    outputs:
      should_run: ${{ steps.should_run.outputs.value }}
      changes: ${{ steps.changes.outputs.all_changed_files }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
            fetch-depth: 2

      - id: changes
        name: File Changes
        uses: tj-actions/changed-files@v23

      - name: Ouput Changed files
        run: |
          for file in ${{ steps.changes.outputs.all_changed_files }}; do
            echo $file
          done
      
      - id: should_run
        run: echo ::set-output name=value::${{ contains(steps.changes.outputs.all_changed_files, 'backend/') }}

  build_test:
      needs: get_file_changes
      if: ${{ needs.get_file_changes.outputs.should_run == 'true' }}

      # To use Remote Caching, uncomment the next lines and follow the steps below.
      env:
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
        TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
        DATABASE_URL_PROD: ${{ secrets.DATABASE_URL_PROD }}
        DATABASE_URL_MOCK: ${{ secrets.DATABASE_URL_MOCK }}

      name: Build test and deploy backend
      timeout-minutes: 15
      runs-on: ${{ matrix.os }}

      strategy:
        matrix:
          os: [ubuntu-latest]

      steps:

        - name: Sets env vars for production
          run: echo "DATABASE_URL=$DATABASE_URL_PROD" >> $GITHUB_ENV
          if: ${{ github.ref_name == 'main' }}

        - name: Sets env vars for side branches
          run: echo "DATABASE_URL=$DATABASE_URL_MOCK" >> $GITHUB_ENV
          if: ${{ github.ref_name != 'main' }}

        - name: Check out code
          uses: actions/checkout@v2
          with:
            fetch-depth: 2

        - name: Setup Node.js environment
          uses: actions/setup-node@v2
          with:
            node-version: 16
            cache: 'yarn'

        - name: Cleanup unnecesary packages for build
          run: rm -rf frontend .github

        - name: Install dependencies
          run: yarn

        - name: Build and test db
          if: contains(needs.get_file_changes.outputs.all_changed_files, 'backend/db/')
          run: yarn db build && yarn db test

        - name: Build and test api
          if: contains(needs.get_file_changes.outputs.all_changed_files, 'backend/api/') || contains(needs.get_file_changes.outputs.all_changed_files, 'backend/db/')
          run: yarn db build && yarn api build && yarn api test
        
        - name: Deploy DB migrations
          if: contains(needs.get_file_changes.outputs.all_changed_files, 'backend/api/') || contains(needs.get_file_changes.outputs.all_changed_files, 'backend/db/')
          run: yarn db prisma deploy
        
  eb_deploy_api:
      needs: [get_file_changes, build_test]
      if: |
          needs.get_file_changes.outputs.should_run == 'true' &&
          needs.build_test.result == 'success' && 
          (github.ref_name == 'main' || github.ref_name == 'dev')

      runs-on: ${{ matrix.os }}
      strategy:
        matrix: 
          os: [ubuntu-latest]

      steps:
          - name: Sets env vars for production
            run: echo "EB_ENV=prod" >> $GITHUB_ENV
            if: ${{ github.ref_name == 'main' }}

          - name: Sets env vars for development
            if: ${{ github.ref_name == 'dev' }}
            run: echo "EB_ENV=dev" >> $GITHUB_ENV

          - name: Check out code
            uses: actions/checkout@v2
            with:
              fetch-depth: 2

          - name: Create Procfile
            uses: "finnp/create-file-action@master"
            env:
              FILE_NAME: "Procfile"
              FILE_DATA: "web: yarn api prod"

          - name: Copy EB hooks directory
            run: cp -R _config/.platform .platform 

          - name: Cleanup unnecesary packages for zip
            run: rm -rf frontend

          - name: Zip
            run: zip -qr '${{ github.sha }}.zip' .

          - name: Deploy to Beanstalk
            uses: einaregilsson/beanstalk-deploy@v18
            with:
              aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              application_name: monolitik-api
              environment_name: ${{ env.EB_ENV }}
              version_label: '${{ github.ref_name }}_${{ github.sha }}'
              region: us-east-1
              use_existing_version_if_available: true
              deployment_package: '${{ github.sha }}.zip'
              wait_for_deployment: false